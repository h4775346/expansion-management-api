services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Use the builder stage instead of production
    ports:
      - "3000:3000"
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DB=expansion_management
      - MYSQL_USER=root
      - MYSQL_PASSWORD=password
      - MONGO_URI=mongodb://mongo:27017/expansion_management
      - JWT_SECRET=your_jwt_secret_key
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
    # Build, run migrations and seed data after the container starts
    command: >
      sh -c "
      echo '🔧 Setting permissions...' &&
      mkdir -p /app/dist &&
      chmod -R 777 /app &&
      echo '📦 Installing dependencies...' &&
      npm install --legacy-peer-deps --no-package-lock &&
      echo '🏗️ Building application...' &&
      npm run build &&
      echo '🔄 Running database migrations...' &&
      npm run migration:run &&
      echo '🌱 Seeding database with test data...' &&
      npm run seed:run &&
      echo '🚀 Starting application...' &&
      npm run start:dev
      "

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: expansion_management
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      timeout: 20s
      retries: 10

volumes:
  mysql_data:
  mongo_data: