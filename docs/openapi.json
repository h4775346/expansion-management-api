{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Welcome message retrieved successfully."
          }
        },
        "summary": "Get API welcome message",
        "tags": [
          "health"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Health status retrieved successfully."
          }
        },
        "summary": "Check API health status",
        "tags": [
          "health"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client successfully registered."
          },
          "400": {
            "description": "Bad request."
          }
        },
        "summary": "Register a new client",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client successfully logged in."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "summary": "Login a client",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Client profile retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current client profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/clients": {
      "post": {
        "operationId": "ClientsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client successfully created."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new client (admin only)",
        "tags": [
          "clients"
        ]
      },
      "get": {
        "operationId": "ClientsController_findAll",
        "parameters": [
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Columns to select (comma-separated)",
            "schema": {
              "example": "id,name,email"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Columns to search in (comma-separated)",
            "schema": {
              "example": "name,email"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "john"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by column and direction (e.g., name:ASC)",
            "schema": {
              "example": "id:ASC"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all clients (admin only)",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/me": {
      "get": {
        "operationId": "ClientsController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Client profile retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current client profile",
        "tags": [
          "clients"
        ]
      }
    },
    "/clients/{id}": {
      "get": {
        "operationId": "ClientsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a client by ID (admin can see any, clients can see their own)",
        "tags": [
          "clients"
        ]
      },
      "patch": {
        "operationId": "ClientsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a client by ID (admin can update any, clients can update their own)",
        "tags": [
          "clients"
        ]
      },
      "delete": {
        "operationId": "ClientsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Client not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a client by ID (admin only)",
        "tags": [
          "clients"
        ]
      }
    },
    "/projects": {
      "post": {
        "operationId": "ProjectsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project successfully created."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new project",
        "tags": [
          "projects"
        ]
      },
      "get": {
        "operationId": "ProjectsController_findAll",
        "parameters": [
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Columns to select (comma-separated)",
            "schema": {
              "example": "id,name,description"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Columns to search in (comma-separated)",
            "schema": {
              "example": "name,description"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "project"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by column and direction (e.g., name:ASC)",
            "schema": {
              "example": "id:ASC"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all projects (admin) or client's projects",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "operationId": "ProjectsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a project by ID",
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "operationId": "ProjectsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a project",
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "ProjectsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a project",
        "tags": [
          "projects"
        ]
      }
    },
    "/vendors": {
      "post": {
        "operationId": "VendorsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVendorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor successfully created."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new vendor (admin only)",
        "tags": [
          "vendors"
        ]
      },
      "get": {
        "operationId": "VendorsController_findAll",
        "parameters": [
          {
            "name": "country",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Columns to select (comma-separated)",
            "schema": {
              "example": "id,name,country"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Columns to search in (comma-separated)",
            "schema": {
              "example": "name,country"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "vendor"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by column and direction (e.g., name:ASC)",
            "schema": {
              "example": "id:ASC"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendors retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all vendors with optional filtering",
        "tags": [
          "vendors"
        ]
      }
    },
    "/vendors/{id}": {
      "get": {
        "operationId": "VendorsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a vendor by ID",
        "tags": [
          "vendors"
        ]
      },
      "patch": {
        "operationId": "VendorsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor updated successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a vendor by ID (admin only)",
        "tags": [
          "vendors"
        ]
      },
      "delete": {
        "operationId": "VendorsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Vendor not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a vendor by ID (admin only)",
        "tags": [
          "vendors"
        ]
      }
    },
    "/projects/{id}/matches/rebuild": {
      "post": {
        "operationId": "MatchingController_rebuildMatches",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matches rebuilt successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden. Admin access required."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Rebuild matches for a project (Admin only)",
        "tags": [
          "matching"
        ]
      }
    },
    "/research": {
      "post": {
        "operationId": "ResearchController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResearchDocDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Research document successfully created."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a research document",
        "tags": [
          "research"
        ]
      },
      "get": {
        "operationId": "ResearchController_findAll",
        "parameters": [
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "Columns to select (comma-separated)",
            "schema": {
              "example": "title,content,createdAt"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "Columns to search in (comma-separated)",
            "schema": {
              "example": "title,content"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "document"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by column and direction (e.g., name:ASC)",
            "schema": {
              "example": "createdAt:DESC"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 10
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research documents retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all research documents with pagination",
        "tags": [
          "research"
        ]
      }
    },
    "/research/search": {
      "get": {
        "operationId": "ResearchController_search",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Research documents retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Search research documents",
        "tags": [
          "research"
        ]
      }
    },
    "/research/{id}": {
      "get": {
        "operationId": "ResearchController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Research document ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research document retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Research document not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a research document by ID",
        "tags": [
          "research"
        ]
      },
      "patch": {
        "operationId": "ResearchController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Research document ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResearchDocDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Research document updated successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Research document not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a research document",
        "tags": [
          "research"
        ]
      },
      "delete": {
        "operationId": "ResearchController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Research document ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Research document deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Research document not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a research document",
        "tags": [
          "research"
        ]
      }
    },
    "/analytics/top-vendors": {
      "get": {
        "operationId": "AnalyticsController_getTopVendors",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Top vendors retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get top vendors by country",
        "tags": [
          "analytics"
        ]
      }
    }
  },
  "info": {
    "title": "Expansion Management API",
    "description": "API for managing client projects, vendor matching, and analytics",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {}
      },
      "LoginDto": {
        "type": "object",
        "properties": {}
      },
      "CreateClientDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateClientDto": {
        "type": "object",
        "properties": {}
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {}
      },
      "CreateVendorDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateVendorDto": {
        "type": "object",
        "properties": {}
      },
      "CreateResearchDocDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}